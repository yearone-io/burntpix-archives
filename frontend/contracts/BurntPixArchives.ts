/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type ArchiveStruct = {
  image: BytesLike;
  iterations: BigNumberish;
  level: BigNumberish;
  blockNumber: BigNumberish;
  creator: AddressLike;
};

export type ArchiveStructOutput = [
  image: string,
  iterations: bigint,
  level: bigint,
  blockNumber: bigint,
  creator: string
] & {
  image: string;
  iterations: bigint;
  level: bigint;
  blockNumber: bigint;
  creator: string;
};

export interface BurntPixArchivesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createFractalClone"
      | "fibonacciIterations"
      | "generateArchiveMetadata"
      | "generateCollectionMetadata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createFractalClone",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fibonacciIterations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateArchiveMetadata",
    values: [ArchiveStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateCollectionMetadata",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createFractalClone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fibonacciIterations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateArchiveMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateCollectionMetadata",
    data: BytesLike
  ): Result;
}

export interface BurntPixArchives extends BaseContract {
  connect(runner?: ContractRunner | null): BurntPixArchives;
  waitForDeployment(): Promise<this>;

  interface: BurntPixArchivesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createFractalClone: TypedContractMethod<
    [registry: AddressLike, codehub: AddressLike, seed: BigNumberish],
    [string],
    "nonpayable"
  >;

  fibonacciIterations: TypedContractMethod<
    [n: BigNumberish, multiplier: BigNumberish],
    [bigint],
    "view"
  >;

  generateArchiveMetadata: TypedContractMethod<
    [
      archive: ArchiveStruct,
      burntPicFractal: AddressLike,
      highestLevel: BigNumberish
    ],
    [string],
    "view"
  >;

  generateCollectionMetadata: TypedContractMethod<
    [fractalClone: AddressLike, burntPicFractal: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createFractalClone"
  ): TypedContractMethod<
    [registry: AddressLike, codehub: AddressLike, seed: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fibonacciIterations"
  ): TypedContractMethod<
    [n: BigNumberish, multiplier: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateArchiveMetadata"
  ): TypedContractMethod<
    [
      archive: ArchiveStruct,
      burntPicFractal: AddressLike,
      highestLevel: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateCollectionMetadata"
  ): TypedContractMethod<
    [fractalClone: AddressLike, burntPicFractal: AddressLike],
    [string],
    "view"
  >;

  filters: {};
}
