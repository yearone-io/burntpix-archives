/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FractalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "feesburnt"
      | "gasused"
      | "getData"
      | "getDataBatch"
      | "image"
      | "iterations"
      | "migrate"
      | "refine"
      | "registry"
      | "setData"
      | "setDataBatch"
      | "supportsInterface"
      | "tipspaid",
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DataChanged"): EventFragment;

  encodeFunctionData(functionFragment: "feesburnt", values?: undefined): string;
  encodeFunctionData(functionFragment: "gasused", values?: undefined): string;
  encodeFunctionData(functionFragment: "getData", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getDataBatch",
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: "image", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "iterations",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "refine",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setDataBatch",
    values: [BytesLike[], BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "tipspaid", values?: undefined): string;

  decodeFunctionResult(functionFragment: "feesburnt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDataBatch",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "image", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iterations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDataBatch",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "tipspaid", data: BytesLike): Result;
}

export namespace DataChangedEvent {
  export type InputTuple = [dataKey: BytesLike, dataValue: BytesLike];
  export type OutputTuple = [dataKey: string, dataValue: string];
  export interface OutputObject {
    dataKey: string;
    dataValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Fractal extends BaseContract {
  connect(runner?: ContractRunner | null): Fractal;
  waitForDeployment(): Promise<this>;

  interface: FractalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  feesburnt: TypedContractMethod<[], [bigint], "view">;

  gasused: TypedContractMethod<[], [bigint], "view">;

  getData: TypedContractMethod<[key: BytesLike], [string], "view">;

  getDataBatch: TypedContractMethod<[keys: BytesLike[]], [string[]], "view">;

  image: TypedContractMethod<[], [string], "view">;

  iterations: TypedContractMethod<[], [bigint], "view">;

  migrate: TypedContractMethod<[_registry: AddressLike], [void], "nonpayable">;

  refine: TypedContractMethod<[iters: BigNumberish], [void], "nonpayable">;

  registry: TypedContractMethod<[], [string], "view">;

  setData: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [void],
    "payable"
  >;

  setDataBatch: TypedContractMethod<
    [arg0: BytesLike[], arg1: BytesLike[]],
    [void],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  tipspaid: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "feesburnt",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gasused",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getData",
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDataBatch",
  ): TypedContractMethod<[keys: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "image",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "iterations",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrate",
  ): TypedContractMethod<[_registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refine",
  ): TypedContractMethod<[iters: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registry",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setData",
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "setDataBatch",
  ): TypedContractMethod<
    [arg0: BytesLike[], arg1: BytesLike[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface",
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tipspaid",
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DataChanged",
  ): TypedContractEvent<
    DataChangedEvent.InputTuple,
    DataChangedEvent.OutputTuple,
    DataChangedEvent.OutputObject
  >;

  filters: {
    "DataChanged(bytes32,bytes)": TypedContractEvent<
      DataChangedEvent.InputTuple,
      DataChangedEvent.OutputTuple,
      DataChangedEvent.OutputObject
    >;
    DataChanged: TypedContractEvent<
      DataChangedEvent.InputTuple,
      DataChangedEvent.OutputTuple,
      DataChangedEvent.OutputObject
    >;
  };
}
